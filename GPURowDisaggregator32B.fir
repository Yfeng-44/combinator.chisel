circuit GPURowDisaggregator32B :
  module GPURowDisaggregator32B :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip disaggregatedData : UInt<16>[16], flip rowBuffer : UInt<16>[16], out : UInt<16>[16]}

    node masked_words = and(io.rowBuffer[0], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_0_T = or(masked_words, io.disaggregatedData[0]) @[combinator.scala 109:31]
    io.out[0] <= _io_out_0_T @[combinator.scala 109:15]
    node masked_words_1 = and(io.rowBuffer[1], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_1_T = or(masked_words_1, io.disaggregatedData[1]) @[combinator.scala 109:31]
    io.out[1] <= _io_out_1_T @[combinator.scala 109:15]
    node masked_words_2 = and(io.rowBuffer[2], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_2_T = or(masked_words_2, io.disaggregatedData[2]) @[combinator.scala 109:31]
    io.out[2] <= _io_out_2_T @[combinator.scala 109:15]
    node masked_words_3 = and(io.rowBuffer[3], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_3_T = or(masked_words_3, io.disaggregatedData[3]) @[combinator.scala 109:31]
    io.out[3] <= _io_out_3_T @[combinator.scala 109:15]
    node masked_words_4 = and(io.rowBuffer[4], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_4_T = or(masked_words_4, io.disaggregatedData[4]) @[combinator.scala 109:31]
    io.out[4] <= _io_out_4_T @[combinator.scala 109:15]
    node masked_words_5 = and(io.rowBuffer[5], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_5_T = or(masked_words_5, io.disaggregatedData[5]) @[combinator.scala 109:31]
    io.out[5] <= _io_out_5_T @[combinator.scala 109:15]
    node masked_words_6 = and(io.rowBuffer[6], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_6_T = or(masked_words_6, io.disaggregatedData[6]) @[combinator.scala 109:31]
    io.out[6] <= _io_out_6_T @[combinator.scala 109:15]
    node masked_words_7 = and(io.rowBuffer[7], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_7_T = or(masked_words_7, io.disaggregatedData[7]) @[combinator.scala 109:31]
    io.out[7] <= _io_out_7_T @[combinator.scala 109:15]
    node masked_words_8 = and(io.rowBuffer[8], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_8_T = or(masked_words_8, io.disaggregatedData[8]) @[combinator.scala 109:31]
    io.out[8] <= _io_out_8_T @[combinator.scala 109:15]
    node masked_words_9 = and(io.rowBuffer[9], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_9_T = or(masked_words_9, io.disaggregatedData[9]) @[combinator.scala 109:31]
    io.out[9] <= _io_out_9_T @[combinator.scala 109:15]
    node masked_words_10 = and(io.rowBuffer[10], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_10_T = or(masked_words_10, io.disaggregatedData[10]) @[combinator.scala 109:31]
    io.out[10] <= _io_out_10_T @[combinator.scala 109:15]
    node masked_words_11 = and(io.rowBuffer[11], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_11_T = or(masked_words_11, io.disaggregatedData[11]) @[combinator.scala 109:31]
    io.out[11] <= _io_out_11_T @[combinator.scala 109:15]
    node masked_words_12 = and(io.rowBuffer[12], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_12_T = or(masked_words_12, io.disaggregatedData[12]) @[combinator.scala 109:31]
    io.out[12] <= _io_out_12_T @[combinator.scala 109:15]
    node masked_words_13 = and(io.rowBuffer[13], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_13_T = or(masked_words_13, io.disaggregatedData[13]) @[combinator.scala 109:31]
    io.out[13] <= _io_out_13_T @[combinator.scala 109:15]
    node masked_words_14 = and(io.rowBuffer[14], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_14_T = or(masked_words_14, io.disaggregatedData[14]) @[combinator.scala 109:31]
    io.out[14] <= _io_out_14_T @[combinator.scala 109:15]
    node masked_words_15 = and(io.rowBuffer[15], UInt<16>("hff00")) @[combinator.scala 108:40]
    node _io_out_15_T = or(masked_words_15, io.disaggregatedData[15]) @[combinator.scala 109:31]
    io.out[15] <= _io_out_15_T @[combinator.scala 109:15]

